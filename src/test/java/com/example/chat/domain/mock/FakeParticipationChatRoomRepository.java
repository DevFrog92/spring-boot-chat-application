package com.example.chat.domain.mock;

import com.example.chat.domain.chatroom.domain.ChatRoom;
import com.example.chat.domain.chatroom.domain.ParticipationRoom;
import com.example.chat.domain.chatroom.service.port.ParticipationChatRoomRepository;
import com.example.chat.domain.member.domain.Member;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

public class FakeParticipationChatRoomRepository implements ParticipationChatRoomRepository {
    private Long autoGeneratedId = 0L;
    private List<ParticipationRoom> store = new ArrayList<>();

    @Override
    public Optional<ParticipationRoom> getByMemberAndRoom(Member member, ChatRoom chatRoom) {
        return store.stream().filter(room ->
                Objects.equals(room.getChatRoom().getId(), chatRoom.getId())
                        && Objects.equals(room.getMember().getId(), member.getId())).findAny();
    }

    @Override
    public void deleteByMemberAndRoom(Member member, ChatRoom chatRoom) {
        store = store.stream().filter(room ->
                !(Objects.equals(room.getChatRoom().getId(), chatRoom.getId())
                        && Objects.equals(room.getMember().getId(), member.getId())))
                .collect(Collectors.toList());
    }

    @Override
    public void deleteAllByRoom(ChatRoom room) {
        store.clear();
    }

    @Override
    public ParticipationRoom save(ParticipationRoom participationRoom) {
        if(participationRoom.getId() == null) {
            ParticipationRoom newParticipationRoom = ParticipationRoom.builder()
                    .id(++autoGeneratedId)
                    .member(participationRoom.getMember())
                    .chatRoom(participationRoom.getChatRoom())
                    .joined(participationRoom.getJoined())
                    .submitKey(participationRoom.getSubmitKey())
                    .build();

            store.add(newParticipationRoom);
            return newParticipationRoom;
        }else {
            store.removeIf(room -> Objects.equals(room.getId(),participationRoom.getId()));
            store.add(participationRoom);
            return participationRoom;
        }
    }
}
